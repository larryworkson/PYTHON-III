SQL commands
DDL (DATA DEFINITION LANGUAGE)
    - CREATE, ALTER, DROP

DML (DATA MANIPULATION LANGUAGE)
    - INSERT, UPDATE, DELETE, EXPLAIN PLAN, LOCK TABLE

DCL (DATA CONTROL LANGUAGE) - Serve para controlar os acessos ao BD.
    - GRANT, REVOKE

DQL (DATA QUERY LANGUAGE) - Somente para consultas no BD.
    - SELECT


criar schema (Serve para organizar categorias de tabelas)
CREATE SCHEMA nome_do_schema

criar tabela
CREATE TABLE nome_tabela (
    id serial PRIMARY KEY, #serial cria um id automaticamente sequencial
    coluna 1 VARCHAR(50), #tipo da coluna é string limitado a 50 caracteres
    coluna 2 INTEGER,
    coluna 3 DECIMAL(10,2) #tipo da coluna é FLOAT sendo 10 o nº max de dígitos e 2 o número de casas depois da vírgula.

)

SELECT * FROM nome_do_schema.nome_tabela
-------------------
ALTERANDO NOME DA TABELA
ALTER TABLE nome_do_schema.nome_tabela RENAME TO novo_nome_tabela

ALTERANDO NOME DA COLUNA
ALTER TABLE nome_do_schema.nome_tabela RENAME nome_coluna TO novo_nome_coluna

ADICIONANDO COLUNAS
ALTER TABLE nome_do_schema.nome_tabela
ADD COLUMN nome_nova_coluna INT;

ALTERANDO TIPO DA COLUNA
ALTER TABLE nome_do_schema.nome_tabela
ALTER COLUMN nome_coluna TYPE VARCHAR(50)
-------------------

SETANDO UMA TABELA EM OUTRO SCHEMA
CREATE SCHEMA nome_do_schema;

ALTER TABLE outro_schema.outra_tabela #aqui vai o endereço da tabela que deseja copiar
SET SCHEMA nome_do_schema;

-------------------


DELETANDO COLUNA
ALTER TABLE nome_do_schema.nome_tabela
DROP COLUMN nome_coluna;

DELETANDO TABELA
DROP TABLE nome_do_schema.nome_tabela;

----------------------

INSERINDO DADOS NA TABELA
INSERT INTO study.alunos_ada(
	nome_aluno,
	cpf,
	email,
	fone,
	data_nascimento)
VALUES ('Mirelle', '12345678900', 'email@email.com', '(00)0000-000', '1992-06-01')


---------------------

ATUALIZANDO DADOS NA TABELA
UPDATE study.alunos_ada SET nome_aluno = 'Gabriela', data_nascimento = '2000-03-03'
WHERE nome_aluno = 'Mirelle'
RETURNING * #mostra o resultado da execução em seguida.

UPDATE study.alunos_ada SET data_nascimento = '2002-09-11'
WHERE id in (2,4) #executa no ID 2 e 4

UPDATE study.alunos_ada SET data_nascimento = '1992-06-10'
WHERE id BETWEEN 1 AND 4 #executa em um intervalo de IDs.

----------------------

DELETANDO DADOS DA TABELA
DELETE FROM study.alunos_ada WHERE id = 5

DELETE FROM study.alunos_ada WHERE id BETWEEN 4 AND 5 #detelando itens de um intervalo
RETURNING nome_aluno #mostra o resultado da execução em seguida.


----------------------
LOCK TABLE
#este comando permite que usuários vejam apenas os nomes das colunas
begin; # Inicia uma transação. Todas as operações subsequentes nesta transação serão tratadas de forma isolada até que a transação seja confirmada ou revertida.
	lock table study.alunos_ada IN ACCESS SHARE MODE;

COMMIT; #encerra o bloqueio

SELECT * from study.alunos_ada

UPDATE study.alunos_ada SET nome_aluno = 'Larry'
WHERE id = 8


#este comando permite que o usuário vejam todos os regirstros
begin;
lock table study.alunos_ada IN ROW SHARE MODE;
commit;


EXPLAIN SELECT * FROM study.alunos_ada #mostra quanto de CPU a query está usando.

-------------------------------
COMANDOS DCL

GRANT privilege_list ALL
on nome_tabela
to role_name

#criando usuário
create role Larry
login
password '123';

# permissão para alterar estrutura da tabela
GRANT ALTER TABLE ON nome_tabela TO nome_usuario

-- grant #permite o usuário ver a tabela
GRANT SELECT
on nome_tabela to nome_usuario;

GRANT INSERT, UPDATE, DELETE #permite que usuário atualize a tabela.
on nome_tabela to nome_usuario

#revogar acesso ao usuário
REVOKE select on nome_tabela from nome_usuario

------------------------------------
COMANDOS DQL - funções de agregação precisa ser agrupada (GROUP BY)

#seleção de dados não duplicados
SELECT DISTINCT Telefone FROM Contato

#seleção de 10% de nomes começam com A
SELECT * FROM Contato WHERE Nome LIKE 'A%' LIMIT 10

# um seleção da soma de todas as vendas agrupadas por ano e mes
select EXTRACT(MONTH FROM data_pedido) as mes,
	EXTRACT (YEAR FROM data_pedido) as ano,
	SUM (preco_prato) as total_vendas FROM study.pedidos
	GROUP BY EXTRACT(MONTH FROM data_pedido), EXTRACT(YEAR FROM data_pedido)
	ORDER BY ano, mes


-- CTE #Common Table Expression, em tradução livre podemos dizer que CTE é uma expressão de tabela comum. Assim, podemos defini-la como um resultado temporário.

WITH vendas_por_mes as (
SELECT
	DATE_PART('month', data_pedido) as mes,
	DATE_PART('year', data_pedido) as ano,
	SUM(preco_prato) as total_vendas
	FROM study.pedidos
	GROUP BY ano, mes
)

select mes, ano, total_vendas FROM vendas_por_mes ORDER BY ano, mes

#SUBQUERYS

SELECT primeiro_nome, salario FROM empregados WHERE salario > ( SELECT max(salario) FROM empregados WHERE id = 4)

# STORE PROCEDURES - cria rotinas de processamentos (funções)

-- como transferir estes valores entre as contas

CREATE OR REPLACE procedure transferencia (
	enviado int, 
	recebe int,
	quantidade dec
)
language plpgsql
as $$
begin

-- subtrair a quantidade de quem enviar
update contas
set saldo = saldo - quantidade
where id = enviado

-- add quantidade da pessoa que recebe
update contas
set saldo + quantidade
where id = recebe
commit;
end;$$

call transferencia(1,2,1000)